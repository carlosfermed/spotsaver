
package spotsaver;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.Period;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Carlos Fernández Medinilla
 */
public class PanelRetirarVehiculo extends javax.swing.JPanel {
    
    public PanelRetirarVehiculo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtfieldMatriculaRetirar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnRetirar = new java.awt.Button();

        setPreferredSize(new java.awt.Dimension(453, 400));

        txtfieldMatriculaRetirar.setFont(new java.awt.Font("Segoe UI Symbol", 1, 24)); // NOI18N

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("RETIRAR VEHÍCULO");

        jLabel2.setText("Matricula vehículo");

        btnRetirar.setBackground(new java.awt.Color(153, 204, 0));
        btnRetirar.setForeground(new java.awt.Color(0, 0, 0));
        btnRetirar.setLabel("Retirar");
        btnRetirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetirarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRetirar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(txtfieldMatriculaRetirar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1)
                .addGap(47, 47, 47)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtfieldMatriculaRetirar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(btnRetirar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRetirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetirarActionPerformed
    
        LocalDate fechaActual = LocalDate.now();        
        LocalDate fechaAlquiler;   
        Date fecha = null;
        int[] parametrosFechaInt = new int[3];
        String[] parametrosFecha;
        int diasDeUsoParquing;
        final int ARAGON_ID = 11;
        final int DIAGONAL_ID = 15;
        final int ARIBAU_ID = 19;
        double precioPorDia = 0.0;
                
        try {
            
            Connection conexion = DriverManager.getConnection("jdbc:mysql://localhost/bdspotsaver", "root", "");
            Statement stat = conexion.createStatement();
                            
            ResultSet resultado = stat.executeQuery("SELECT * FROM vehiculos WHERE matricula = '" + txtfieldMatriculaRetirar.getText().trim() + "'");
                        
            if (resultado.next() && (resultado.getString("estadoalquiler").equalsIgnoreCase("pendiente"))){
                
                /**
                 * Cálculo de días a facturar.
                 */   
                
                fecha = resultado.getDate("fechaentrada");
                
                // Transformamos la instancia de tipo Date recuperada de la BBDD en un objeto de tipo LocalDate.
                parametrosFecha = fecha.toString().split("-");

                for (int i = 0; i < parametrosFechaInt.length; i++) {
                    parametrosFechaInt[i] = Integer.parseInt(parametrosFecha[i]);
                }

                fechaAlquiler = LocalDate.of(parametrosFechaInt[0], parametrosFechaInt[1], parametrosFechaInt[2]);

                // Calculamos la diferencia entre fechas mediante la clase Period (devuelve año, mes, día).
                Period diferenciaDeDias = Period.between(fechaAlquiler, fechaActual);
                
                // Calculamos los días a partir de la fecha obtenida.
                diasDeUsoParquing = diferenciaDeDias.getYears() * 365 + diferenciaDeDias.getMonths() * 30 + diferenciaDeDias.getDays();
                diasDeUsoParquing = (diasDeUsoParquing == 0) ? 1 : diasDeUsoParquing;
                
                /**
                 * Recoger precio/día según id del parquing.
                 */
                
                int parquingID = resultado.getInt("pkID");
                
                switch (parquingID) {
                    case ARAGON_ID -> precioPorDia = PreciosPorDia.ARAGON;
                    case DIAGONAL_ID -> precioPorDia = PreciosPorDia.DIAGONAL;
                    case ARIBAU_ID -> precioPorDia = PreciosPorDia.ARIBAU;
                    default -> {
                    }
                }
                
                /**
                 * Indicamos a BBDD que el pk vuelve a estar disponible.
                 */
                
                String actualizarDisponibilidadSql = "UPDATE `parquings` SET `disponibilidad` = 'true' WHERE `id` = " + parquingID;
                int sqlDisponibilidadExitosa = stat.executeUpdate(actualizarDisponibilidadSql);
                
                /**
                 * Emitimos factura.
                 */
                
                if (sqlDisponibilidadExitosa > 0) {
                    
                    BufferedWriter writer = new BufferedWriter(new FileWriter("factura.html"));
                    
                    writer.write("<html><head><title>Factura</title><style>div {border: 1px solid green;border-radius:4px;padding:15px; width: 300px}</style></head><body>");
                    writer.write("<div><h1>Factura</h1>");
                    writer.write("<p>Fecha de emisión de la factura: " + LocalDate.now() + "</p>");
                    writer.write("<p>Matrícula del vehículo: " + txtfieldMatriculaRetirar.getText().toUpperCase() + "</p>");
                    writer.write("<p>Total: " +  Math.round((diasDeUsoParquing * precioPorDia) * 100.0) / 100.0 +" euros</p></div>");
                    writer.write("</body></html>");
                    
                    writer.close();                   
                }
                else {
                    JOptionPane.showMessageDialog(null, "No se ha podido realizar la retirada.");
                }
                
                /**
                 * Actualizamos en la BBDD el registro de estado del vehículo.
                 */
                
                String actualizarEstadoAlquilerSql = "UPDATE `vehiculos` SET `estadoalquiler` = 'finalizado' WHERE `matricula` = '" + txtfieldMatriculaRetirar.getText().toUpperCase() + "'";
                int sqlEstadoalquilerExitosa = stat.executeUpdate(actualizarEstadoAlquilerSql);
                
                String actualizarFechasalidaSql = "UPDATE `vehiculos` SET `fechasalida` = '" + LocalDate.now() + "' WHERE `matricula` = '" + txtfieldMatriculaRetirar.getText().toUpperCase() + "'";
                int sqlFechasalidaExitosa = stat.executeUpdate(actualizarFechasalidaSql);
                
                if (sqlEstadoalquilerExitosa > 0 && sqlFechasalidaExitosa > 0)
                    JOptionPane.showMessageDialog(null, "El vehículo ha sido retirado del pk con éxito.\nLa factura ha sido emitida.");
                
                String actualizarImporteTotalSql = "UPDATE `vehiculos` SET `importetotal` = '" + (diasDeUsoParquing * precioPorDia) + "' WHERE `matricula` = '" + txtfieldMatriculaRetirar.getText().toUpperCase() + "'";
                stat.executeUpdate(actualizarImporteTotalSql); 
                
                txtfieldMatriculaRetirar.setText("");
            }
            else {
                JOptionPane.showMessageDialog(null, "No se encontró la matrícula,\nasegúrese de que es correcta.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(PanelAlquilerPlaza.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PanelRetirarVehiculo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRetirarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnRetirar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtfieldMatriculaRetirar;
    // End of variables declaration//GEN-END:variables
}
